map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
server {
    listen 80;
    server_name i12d105.p.ssafy.io;
    return 301 https://$server_name$request_uri;
}

# HTTPS 서버 블록
server {
    listen 443 ssl;
    server_name i12d105.p.ssafy.io;

    # SSL 인증서 설정
    ssl_certificate /etc/letsencrypt/live/i12d105.p.ssafy.io/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/i12d105.p.ssafy.io/privkey.pem;

    # SSL 설정 최적화
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location /api {
<<<<<<< HEAD
<<<<<<< HEAD
        proxy_pass http://backend:8080;
=======
        proxy_pass http://spring-backend:8081/;
>>>>>>> back_develop
=======
        rewrite ^/api/(.*) /$1 break;
        proxy_pass http://spring-backend:8081;
>>>>>>> 269263a7f563adde489e2ae40d5121b389b81805
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> 269263a7f563adde489e2ae40d5121b389b81805
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/ {
        proxy_pass http://spring-backend:8081/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_hide_header X-Frame-Options;
        proxy_buffering off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
<<<<<<< HEAD
>>>>>>> back_develop
=======
    }

    # 이미지 프록시를 위한 location 블록 추가
    location /proxy {
    if ($arg_url = "") {
        return 400 "url parameter missing";
    }
    set $target $arg_url;
    proxy_pass $target;
    proxy_set_header Host pop4u.s3.amazonaws.com;
    proxy_ssl_server_name on;
    proxy_ssl_verify off;
    proxy_set_header Accept-Encoding "";
>>>>>>> 269263a7f563adde489e2ae40d5121b389b81805
    }
}

server {
    if ($host = example.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

  listen 80;
  server_name example.com;
    return 404; # managed by Certbot
}